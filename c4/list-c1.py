date = []  # 空のリスト「date」を初期化
for i in range(1, 6):  # 1から5までの数字をループ
    date.append(i * 2)  # 各数字を2倍して「date」リストに追加
print(date)  # 結果のリストを出力



# --- リスト内包表記 (List Comprehension) ---
# Pythonで最も推奨される、簡潔で読みやすい書き方。
# 「1から5までの各数値(i)を、それぞれ2倍したもので構成される新しいリストを作る」
# という宣言を、一行で表現している。

date = [i * 2 for i in range(1, 6)]
print(date)

date = [
    i * 2                # 3. 新しいリストに入れる要素の生成ルール (各数値を2倍する)
    for i in range(1, 6) # 1. 処理の対象となる元のデータ (1から5までの数値)
                         # 2. forループで元データから一つずつ取り出す
]

print(date) # 結果: [2, 4, 6, 8, 10]



# --- map関数とlambda式を使う方法 ---
# 「ある処理」と「処理対象のデータ」を明確に分離する、関数型プログラミングのアプローチ。
# 大規模なデータ処理や、複雑な関数を再利用する際に強力。

date = list(map(lambda x: x * 2, range(1, 6)))
print(date)


date = list(            # 4. mapの結果は特殊な形式(イテレータ)なので、最後にリスト形式に変換して完成。
    map(                # 3. 「処理」と「データ」を引数に取り、各データに処理を適用(map)する監督役。
        lambda x: x * 2,  # 1. ここで適用したい「処理」を定義。これは「受け取った値(x)を2倍する」という名無しの使い捨て関数。
        range(1, 6)       # 2. 処理を適用させたい「データ」の集まり (1から5までの数値)。
    )
)

print(date) # 結果: [2, 4, 6, 8, 10]