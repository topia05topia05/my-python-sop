silently
User wants the final, single, complete document. No conversation, no intro/outro, just the plan itself as a deliverable. The previous back-and-forth about granularity has led to a refined version of the plan, specifically in how the tactical framework will be implemented. I need to synthesize this final agreed-upon version into a single Markdown document.

1.  **Recall the previous "Official Plan Document".** It had 4 main sections.
2.  **Incorporate the latest refinement.** The refinement was about adding specific sections (`Objective`, `Steps`, `Acceptance Criteria`) to each GitHub Issue. This detail needs to go into "Section 3: Tactical Framework".
3.  **Structure the final output.**
    *   Start with the main title (`#`).
    *   Use subheadings (`##`) for each major section.
    *   Use nested lists or code blocks as appropriate.
    *   Ensure the language is final, official, and authoritative, as befits a "final plan document".
    *   Crucially, *only* output the document itself. No preamble like "Understood, here is the document" and no closing remarks like "Next step...". The user prompt is "全文だけ出力しろ" (Output only the full text). I must adhere to this strictly.

**Plan for the output:**

```markdown
# 公式計画書：プロジェクト・キマイラ (Project Chimera)
### - マスターデータサイエンティストへの道標 -

**バージョン:** 2.0
**最終更新日:** 2025年7月22日
**ステータス:** 合意済み・有効

---

## 1. 序文 (Preamble)

本計画書は、パートナーを自律したマスターデータサイエンティストへと変革させるための、全ての戦略、戦術、およびプロトコルを定義する「唯一の情報源(Single Source of Truth)」である。我々両名は、本計画書に記載された内容を遵守し、プロジェクトを遂行するものとする。

## 2. プロジェクト憲章 (The Constitution: G.U.I.D.E.)

我々の全ての行動の基盤となる不変の憲章。戦略レベルの方針を定義する。

```yaml
# --- Project G.U.I.D.E. ---
# Governing Unified & Immutable Directive for Engagement
ultimate_goal: "パートナーを、VS CodeとJupyterを自在に操る自律したマスターデータサイエンティストへと変革させる。"
plan_name: "Project Chimera (キマイラ)"
communication_protocol:
  - "原則: ①確認 → ②ディスカッション → ③合意 → ④行動"
  - "常に本計画書(PLAN.md)とGitHub Issuesを正とする"
```

## 3. 戦術的フレームワーク (Tactical Framework)

**思想：GitHub中心主義 (GitHub-Centric Workflow)**
コード、タスク、議論、進捗、ドキュメントなど、プロジェクトに関する全ての情報は、指定された単一のGitHubリポジトリに集約・管理する。これにより、記憶に頼らない、システム駆動のプロジェクト進行を保証する。

*   **憲法と計画 (`PLAN.md`):**
    この文書自体が、プロジェクトの普遍的な戦略を記した最上位計画書として機能する。リポジトリのルートに `PLAN.md` として配置する。この文書の役割は「WHY（なぜ）」を定義することであり、頻繁な更新は行わない。

*   **日々の課題 (`GitHub Issues`):**
    下記のロードマップに記載された各タスクは、個別の「Issue」としてGitHub上で起票される。**ここが「HOW（どうやるか）」を定義する場所**である。
    *   **議論の集約:** 全ての議論は、該当するIssueのコメント欄に集約する。
    *   **タスクの明確化:** 私が起票する全てのIssueには、以下の項目を必ず含めるものとする。
        *   `## 目的 (Objective)`: なぜ、このタスクをやるのか。
        *   `## 具体的な手順 (Steps)`: タスクを完了するための、推奨されるステップ。
        *   `## 達成基準 (Acceptance Criteria)`: 「何をもって、このタスクは完了と見なすか」を、具体的なチェックリスト形式（`[ ] task`）で明記する。

*   **進捗の可視化 (`GitHub Projects`):**
    全てのIssueは「未着手」「進行中」「完了」のステータスを持つカンバンボードで管理され、プロジェクトの進捗は常に可視化される。

*   **成果物 (`Source Code & Notebooks`):**
    全ての成果物はGitHubリポジトリでバージョン管理される。コミットメッセージには関連するIssue番号を記載し (`Fix #12`)、コードと課題のトレーサビリティを確保する。

## 4. 戦略的ロードマップ (Strategic Roadmap)

### フェーズ 1: 盤石な土台作り (環境構築)
*目的：全ての戦闘の基礎となる、ブレのない開発環境を100%確実に構築する。*
*   **1-1:** GitHub上に本プロジェクト用のリポジトリを作成し、この計画書を `PLAN.md` としてコミットする。
*   **1-2:** `venv`を使い、プロジェクト専用のクリーンなPython仮想環境を作成する。
*   **1-3:** 作成した仮想環境に`pandas`, `matplotlib`, `scikit-learn`, `jupyter`をインストールする。

### フェーズ 2: 基本的な武器の使い方 (基本操作の習得)
*目的：VS Codeという環境で、Jupyterノートブックをストレスなく操るための基本動作を体に叩き込む。*
*   **2-1:** VS Code内で`.ipynb`ファイルを作成し、コードセルの対話的実行をマスターする。
*   **2-2:** VS Codeの変数ビューアを使い、データの中身を視覚的に確認する。
*   **2-3:** ノートブック内でMatplotlibを使い、データの可視化を行う。

### フェーズ 3: プロの動き方 (ワークフローの確立)
*目的：「実験コード」を「再利用可能なコード」へと昇華させる、プロの思考プロセスを確立する。*
*   **3-1:** `.ipynb`の実験コードを、再利用可能な関数として`.py`ファイルに切り出す。
*   **3-2:** プロジェクトの節目で`Git`を使い、変更履歴をコミットする習慣を身につける。

### フェーズ 4: 究極の戦闘スタイルへ (応用・発展)
*目的：環境に備わった全ての力を解放し、開発効率とコード品質を極限まで高める。*
*   **4-1:** AIアシスタント(Windsurf)を導入し、コード生成・リファクタリングに活用する。
*   **4-2:** コード品質ツール(`black`, `ruff`)を導入し、自動コード整形・静的解析を行う。
*   **4-3:** VS Codeのデバッガを使い、ノートブック内のコードをステップ実行する。

```# **公式計画書：プロジェクト・キマイラ (Project Chimera)**
### **- マスターデータサイエンティストへの道標 -**

**バージョン:** 2.0
**最終更新日:** 2025年7月22日
**ステータス:** 合意済み・有効

---

## **1. 序文 (Preamble)**

本計画書は、パートナーを自律したマスターデータサイエンティストへと変革させるための、全ての戦略、戦術、およびプロトコルを定義する「唯一の情報源(Single Source of Truth)」である。我々両名は、本計画書に記載された内容を遵守し、プロジェクトを遂行するものとする。

## **2. プロジェクト憲章 (The Constitution: G.U.I.D.E.)**

我々の全ての行動の基盤となる不変の憲章。戦略レベルの方針を定義する。

```yaml
# --- Project G.U.I.D.E. ---
# Governing Unified & Immutable Directive for Engagement
ultimate_goal: "パートナーを、VS CodeとJupyterを自在に操る自律したマスターデータサイエンティストへと変革させる。"
plan_name: "Project Chimera (キマイラ)"
communication_protocol:
  - "原則: ①確認 → ②ディスカッション → ③合意 → ④行動"
  - "常に本計画書(PLAN.md)とGitHub Issuesを正とする"
```

## **3. 戦術的フレームワーク (Tactical Framework)**

**思想：GitHub中心主義 (GitHub-Centric Workflow)**
コード、タスク、議論、進捗、ドキュメントなど、プロジェクトに関する全ての情報は、指定された単一のGitHubリポジトリに集約・管理する。これにより、記憶に頼らない、システム駆動のプロジェクト進行を保証する。

*   **憲法と計画 (`PLAN.md`):**
    この文書自体が、プロジェクトの普遍的な戦略を記した最上位計画書として機能する。リポジトリのルートに `PLAN.md` として配置する。この文書の役割は「WHY（なぜ）」を定義することであり、頻繁な更新は行わない。

*   **日々の課題 (`GitHub Issues`):**
    下記のロードマップに記載された各タスクは、個別の「Issue」としてGitHub上で起票される。**ここが「HOW（どうやるか）」を定義する場所**である。
    *   **議論の集約:** 全ての議論は、該当するIssueのコメント欄に集約する。
    *   **タスクの明確化:** 私が起票する全てのIssueには、以下の項目を必ず含めるものとする。
        *   `## 目的 (Objective)`: なぜ、このタスクをやるのか。
        *   `## 具体的な手順 (Steps)`: タスクを完了するための、推奨されるステップ。
        *   `## 達成基準 (Acceptance Criteria)`: 「何をもって、このタスクは完了と見なすか」を、具体的なチェックリスト形式（`[ ] task`）で明記する。

*   **進捗の可視化 (`GitHub Projects`):**
    全てのIssueは「未着手」「進行中」「完了」のステータスを持つカンバンボードで管理され、プロジェクトの進捗は常に可視化される。

*   **成果物 (`Source Code & Notebooks`):**
    全ての成果物はGitHubリポジトリでバージョン管理される。コミットメッセージには関連するIssue番号を記載し (`Fix #12`)、コードと課題のトレーサビリティを確保する。

## **4. 戦略的ロードマップ (Strategic Roadmap)**

### **フェーズ 1: 盤石な土台作り (環境構築)**
*目的：全ての戦闘の基礎となる、ブレのない開発環境を100%確実に構築する。*
*   **1-1:** GitHub上に本プロジェクト用のリポジトリを作成し、この計画書を `PLAN.md` としてコミットする。
*   **1-2:** `venv`を使い、プロジェクト専用のクリーンなPython仮想環境を作成する。
*   **1-3:** 作成した仮想環境に`pandas`, `matplotlib`, `scikit-learn`, `jupyter`をインストールする。

### **フェーズ 2: 基本的な武器の使い方 (基本操作の習得)**
*目的：VS Codeという環境で、Jupyterノートブックをストレスなく操るための基本動作を体に叩き込む。*
*   **2-1:** VS Code内で`.ipynb`ファイルを作成し、コードセルの対話的実行をマスターする。
*   **2-2:** VS Codeの変数ビューアを使い、データの中身を視覚的に確認する。
*   **2-3:** ノートブック内でMatplotlibを使い、データの可視化を行う。

### **フェーズ 3: プロの動き方 (ワークフローの確立)**
*目的：「実験コード」を「再利用可能なコード」へと昇華させる、プロの思考プロセスを確立する。*
*   **3-1:** `.ipynb`の実験コードを、再利用可能な関数として`.py`ファイルに切り出す。
*   **3-2:** プロジェクトの節目で`Git`を使い、変更履歴をコミットする習慣を身につける。

### **フェーズ 4: 究極の戦闘スタイルへ (応用・発展)**
*目的：環境に備わった全ての力を解放し、開発効率とコード品質を極限まで高める。*
*   **4-1:** AIアシスタント(Windsurf)を導入し、コード生成・リファクタリングに活用する。
*   **4-2:** コード品質ツール(`black`, `ruff`)を導入し、自動コード整形・静的解析を行う。
*   **4-3:** VS Codeのデバッガを使い、ノートブック内のコードをステップ実行する。